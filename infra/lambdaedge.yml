AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Parameters:
  DomainName:
    Type: String

Resources:
  drinkbarLambdaEdgeRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: basic-auth-lambda-role
      Path: /service-role/
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - edgelambda.amazonaws.com
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  drinkbarLambdaEdge:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: drinkbarBasicAuthentication
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 3
      Role: !GetAtt drinkbarLambdaEdgeRole.Arn
      AutoPublishAlias: stg2
      InlineCode: |
        'use strict';
        exports.handler = (event, context, callback) => {
            const request = event.Records[0].cf.request;
            const headers = request.headers;
            const authUser = 'admin';
            const authPass = 'drinkbar';
            const authString = 'Basic ' + new Buffer(authUser + ':' + authPass).toString('base64');
            if (typeof headers.authorization == 'undefined' || headers.authorization[0].value != authString) {
                const body = 'Unauthorized';
                const response = {
                    status: '401',
                    statusDescription: 'Unauthorized',
                    body: body,
                    headers: {
                        'www-authenticate': [{key: 'WWW-Authenticate', value:'Basic'}]
                    },
                };
                callback(null, response);
            }
            callback(null, request);
        };

  logGroup:
      Type: AWS::Logs::LogGroup
      DependsOn:
        - drinkbarLambdaEdge
      Properties:
        RetentionInDays: 1
        LogGroupName: !Sub "/aws/lambda/${drinkbarLambdaEdge}"

  drinkbarCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref DomainName
      ValidationMethod: DNS

Outputs:
  drinkbarCertificate:
    Value: !Ref drinkbarCertificate
    Export:
      Name: drinkbarCertificate
  drinkbarLambdaEdge:
    Value: !Ref drinkbarLambdaEdge
    Export:
      Name: drinkbarLambdaEdge
